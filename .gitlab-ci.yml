
stages:
  #  - versioning
  - sonarqube-check
  - build
  - push
  - update
  - cleanup

sonarqube-check:
  stage: sonarqube-check
  image: mcr.microsoft.com/dotnet/sdk:8.0
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - apt-get update && apt-get install -y wget unzip
    - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
    - unzip sonar-scanner.zip -d /usr/local
    - export PATH="/usr/local/sonar-scanner-4.8.0.2856-linux/bin:$PATH"
    - dotnet tool install --global dotnet-sonarscanner
    - export PATH="$PATH:/root/.dotnet/tools"
    - dotnet sonarscanner begin /k:"diploma_topsecret_4aa29da7-d824-47ef-ac79-1b0fe2b68096" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN"
    - "dotnet build"
    - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
    - if: $CI_COMMIT_BRANCH == 'main'

build_back:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u s.ivanov -p $REGISTRY_PASSWORD registry.team21.ru
    - docker build -t registry.team21.ru/topsecret/api-release:latest -f Opilochka.API/Dockerfile .
#  only:
#    - dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

push_back:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u s.ivanov -p $REGISTRY_PASSWORD registry.team21.ru
    - docker push registry.team21.ru/topsecret/api-release:latest
    #  only:
    #    - dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

cleanup_job:
  stage: cleanup
  script:
    - echo "Cleaning up"
    - rm -rf "%CACHE_PATH%/" #%CI_PIPELINE_ID%"
    - docker system prune -f
#  when: always


#update_service:
#  stage: update
#  image: docker:latest
#  services:
#    - docker:dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  script:
#    - docker compose -f /opt/projectoola-back/docker-compose.yml pull
#    - docker compose -f /opt/projectoola-back/docker-compose.yml up -d
